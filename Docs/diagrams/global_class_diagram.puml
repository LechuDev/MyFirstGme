@startuml GlobalClasses
skinparam classAttributeIconSize 0

' PlayerState
class PlayerState {
  +PlayerMovementState CurrentPlayerMovementState
  +SetPlayerMovementState(playerMovementState)
  +InGroundedState(): bool
  +IsStateGroundedState(movementState): bool
}

' PlayerController
class PlayerController {
  -CharacterController _characterController
  -Camera _playerCamera
  -PlayerLocomotionInput _playerLocomotionInput
  -PlayerState _playerState
  +RotationMismatch: float
  +IsRotatingToTarget: bool
  +Update()
  -UpdateMovementState()
  -HandleVerticalMovement()
  -HandleLateralMovement()
  -UpdateCameraRotation()
}

' PlayerAnimation
class PlayerAnimation {
  -Animator _animator
  -PlayerLocomotionInput _playerLocomotionInput
  -PlayerState _playerState
  -PlayerController _playerController
  -PlayerActionsInput _playerActionsInput
  +Update()
  -UpdateAnimationState()
}

' CharacterControllerUtils
class CharacterControllerUtils {
  +GetNormalWithSphereCast(characterController, layerMask): Vector3
}

' ThirdPersonInput
class ThirdPersonInput {
  +Vector2 ScrollInput
  +OnScrollCamera(context)
}

' PlayerLocomotionInput
class PlayerLocomotionInput {
  +Vector2 MovementInput
  +Vector2 LookInput
  +bool JumpPressed
  +bool SprintToggledOn
  +bool WalkToggledOn
}

' PlayerInputManager
class PlayerInputManager {
  +static Instance : PlayerInputManager
  +PlayerControls PlayersControls
}

' PlayerActionsInput
class PlayerActionsInput {
  +bool AttackPressed
  +bool GatherPressed
  +OnAttack(context)
  +OnGather(context)
}

' PlayerControls (autogenerated)
class PlayerControls {
  -InputActionAsset asset
}

' Enumerations
enum PlayerMovementState {
  Idling
  Walking
  Running
  Sprinting
  Jumping
  Falling
  Strafing
}

' Relaciones
PlayerController --> PlayerLocomotionInput : reads
PlayerController --> PlayerState : updates/reads
PlayerController --> CharacterControllerUtils : uses
PlayerController --> Camera : uses
PlayerAnimation --> PlayerLocomotionInput : reads
PlayerAnimation --> PlayerState : reads
PlayerAnimation --> PlayerController : reads rotation
PlayerAnimation --> PlayerActionsInput : reads
ThirdPersonInput --> PlayerInputManager : uses
PlayerLocomotionInput --> PlayerInputManager : uses
PlayerActionsInput --> PlayerInputManager : uses
PlayerInputManager --> PlayerControls : creates
PlayerControls ..> PlayerLocomotionInput : provides maps
PlayerControls ..> ThirdPersonInput : provides maps
PlayerControls ..> PlayerActionsInput : provides maps

@enduml
